#!/usr/bin/python3

import json
import time
import base64
import os
import shutil
from flask import Flask, request, jsonify, send_file
from pathlib import Path
from queue import Queue
from threading import Thread

work_dir = '/data'
media_dir = f'{work_dir}/media'
os.makedirs(media_dir, exist_ok=True)
usb_backingfile = os.path.join(work_dir, 'usb_partition.img')

def move_file_to_usb(fpath):
    try:
        os.system('modprobe g_mass_storage -r')
        os.system(f'mount {usb_backingfile} /mnt/')
        os.system(f'rm -rf /mnt/*')
        dest_path = os.path.join('/mnt/', os.path.basename(fpath))
        shutil.copy2(fpath, dest_path)
        os.remove(fpath)
        os.system(f'umount /mnt/')
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
    except:
        os.system(f'umount /mnt/')
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')


class USBSingle:
    def __init__(self) -> None:
        self.fpath_queue = Queue(maxsize=1000)
        Thread(target=self.task).start()

    def task(self):
        while True:
            try:
                while not self.fpath_queue.empty():
                    fpath = self.fpath_queue.get()
                    move_file_to_usb(fpath)
            except:
                print("Usb-server: error")
            time.sleep(1)        

    def add_file(self, fpath):
        self.fpath_queue.put(fpath)

app = Flask(__name__)

usb_manager = USBSingle()

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return 'No file part in the request'

    file = request.files['file']

    if file.filename == '':
        return 'No selected file'
    save_path = f'{media_dir}/{file.filename}'
    file.save(save_path)
    usb_manager.add_file(save_path)
    return 'File uploaded successfully'

@app.route('/addfile', methods=['POST'])
def add_file():
    data = request.get_json()
    fpath = data['fpath']
    usb_manager.add_file(fpath)
    return "200"

@app.route('/alive', methods=['GET'])
def alive():
    return jsonify({'status': 'alive'})


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)