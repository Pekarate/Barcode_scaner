#!/usr/bin/python3

import requests
import os
import json
import evdev
from evdev import InputDevice, categorize, ecodes
from multiprocessing import Process

json_file = "/etc/cfg.json"

with open(json_file) as file:
    data_cfg = json.load(file)

work_dir = '/data'
media = f'{work_dir}/media'
os.makedirs(media, exist_ok=True)
usb_backingfile = os.path.join(work_dir, 'usb_partition.img')

barcode_buff = ''
host_name = data_cfg['host']
port = data_cfg['port']
desktop_url = f'http://{host_name}:{port}/'
logger_url = f'http://{host_name}:{port}/logger'
device_exactly_name = None if 'input_dev' not in data_cfg.keys() else data_cfg['input_dev']


def log(msg):
    try:
        response = requests.post(logger_url, json={'msg': msg})
    except:
        pass


def move_to_usb(fpath):
    url = 'http://127.0.0.1:8080/addfile'
    data = {
        'fpath': fpath
    }
    response = requests.post(url, json=data)


def request_barcode(barcode):
    print("Barcode: ", barcode)
    url = desktop_url + 'barcode'

    data = {
        'barcode': barcode
    }
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            try:
                attachment_filename = response.headers.get('Content-Disposition').split('filename=')[1]
                save_path = f'{media}/{attachment_filename}'
                with open(save_path, 'wb') as file:
                    file.write(response.content)
                print(f"Received file: {attachment_filename}")
                move_to_usb(save_path)
                print("File content saved successfully.")
            except:
                print("Request error")
                pass
        else:
            print("Error occurred while sending the request.")
    except:
        pass


def find_device():
    c = 0
    previ_dev = ""
    while True:
        barcode_device = None
        keyboard_devie = None
        device_list = []
        for path in evdev.list_devices():
            device = InputDevice(path)
            if device is None:
                continue
            device_list.append(path)

            if device_exactly_name is not None:
                if device_exactly_name == path:
                    log(f'Select input: {device_exactly_name}')
                    return device
            if "barcode" in device.name.lower():
                barcode_device = device

            if "keyboard" in device.name.lower():
                keyboard_devie = device

        d = '|'.join(device_list)
        if d != previ_dev:
            log(d)
            previ_dev = d

            
        if barcode_device is not None:
            return barcode_device

        if keyboard_devie is not None:
            return keyboard_devie


def barcode_scanner(barcode_device):
    barcode_device.grab()
    barcode = ""
    for event in barcode_device.read_loop():
        if event.type == ecodes.EV_KEY:
            data = categorize(event)
            if data.keystate == 1 and data.scancode != ecodes.KEY_RESERVED:
                if data.scancode == ecodes.KEY_ENTER:
                    request_barcode(barcode)
                    barcode = ""
                else:
                    barcode += data.keycode[4:]
    print("End")


def main(barcode_device_path):
    barcode_device = InputDevice(barcode_device_path)
    if "sunxi-ir" in barcode_device.name.lower(): 
        return
    try:
        log(barcode_device_path)
        barcode_scanner(barcode_device)
        barcode_device.ungrab()
    except:
        pass


print('Barcode Scanner: start')

# device = find_device()
# print(device.name)
# while True:
#     try:
#         barcode_scanner(device)
#         device.ungrab()
#     except:
#         try:
#             device.ungrab()
#         except:
#             pass
#         # print('Barcode Scanner: Refind device')
#         device = find_device()


from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class InputEventHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory and "event" in event.src_path:
            Process(target=main, args=(event.src_path)).start()

if __name__ == "__main__":
    path = "/dev/input"  # Đường dẫn đến thư mục /dev/input
    for p in os.listdir(path):
        if p.startswith('event'):
            Process(target=main, args=(p)).start()


    event_handler = InputEventHandler()
    observer = Observer()

    observer.schedule(event_handler, path, recursive=False)
    observer.start()

    try:
        while True:
            pass
    except KeyboardInterrupt:
        observer.stop()

    observer.join()